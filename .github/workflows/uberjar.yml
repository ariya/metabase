name: Uberjar

on:
  push:

jobs:

  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    strategy:
      matrix:
        edition: [ee, oss]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
    steps:
    - uses: actions/checkout@v2
    - name: Prepare Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Prepare JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Install Clojure CLI
      run: |
        curl -O https://download.clojure.org/install/linux-install-1.10.1.708.sh &&
        sudo bash ./linux-install-1.10.1.708.sh
    - name: Check versions
      run: |
        echo "Node.js `node --version`"
        echo "yarn `yarn --version`"
        java -version
        echo "Clojure `clojure -e "(println (clojure-version))"`"
        lein --version

    - name: Get yarn cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
    - name: Get M2 cache
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/project.clj') }}-${{ hashFiles('**/deps.edn') }}

    - run: yarn install --frozen-lockfile --prefer-offline
    - run: lein with-profile +include-all-drivers,+cloverage,+junit,+${{ matrix.edition }} deps

    - run: ./bin/build version
    - run: ./bin/build translations

    - name: Grab previously built front-end (if equivalent)
      if: "!contains(github.event.head_commit.message, '[ci nocache]')"
      id: frontend-cache
      uses: actions/cache@v2
      with:
        path: ./resources/frontend_client/
        key: buildcache-${{ matrix.edition }}-frontend-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.cljc', '**/*.cljs', '**/*.json', '**/yarn.lock', '**/sample-dataset.db.mv.db', '!**/frontend/test/') }}

    - name: Grab previously built drivers (if equivalent)
      if: "!contains(github.event.head_commit.message, '[ci nocache]')"
      id: drivers-cache
      uses: actions/cache@v2
      with:
        path: ./modules/drivers/**/target
        key: buildcache-${{ matrix.edition }}-drivers-${{ hashFiles('**/modules/**/*.clj', '**/metabase-plugin.yaml') }}

    - run: ./bin/build frontend
      if: steps.frontend-cache.outputs.cache-hit != 'true'

    - run: ./bin/build drivers
      if: steps.drivers-cache.outputs.cache-hit != 'true'

    - run: ./bin/build backend-licenses
    - run: ./bin/build frontend-licenses
    - run: ./bin/build uberjar

    - name: Mark with the commit hash
      run:  git rev-parse --short HEAD > COMMIT-ID
    - name: Calculate SHA256 checksum
      run: sha256sum ./target/uberjar/metabase.jar > SHA256.sum
    - name: Upload JARs as artifact
      uses: actions/upload-artifact@v2
      with:
        name: metabase-${{ matrix.edition }}-uberjar
        path: |
          ./target/uberjar/metabase.jar
          ./COMMIT-ID
          ./SHA256.sum

  cypress:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    needs: build
    strategy:
      matrix:
        folder: [admin]
    steps:
    - uses: actions/checkout@v2
    - name: Prepare Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Prepare JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Install Clojure CLI
      run: |
        curl -O https://download.clojure.org/install/linux-install-1.10.1.708.sh &&
        sudo bash ./linux-install-1.10.1.708.sh
    - name: Check versions
      run: |
        echo "Node.js `node --version`"
        echo "yarn `yarn --version`"
        java -version
        echo "Clojure `clojure -e "(println (clojure-version))"`"
    - name: Get yarn cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

    - run: ./bin/build version

    - uses: actions/download-artifact@v2
      name: Retrieve uberjar artifact
      with:
        name: metabase-oss-uberjar
    - run: yarn run test-cypress-no-build --folder frontend/test/metabase/scenarios/${{ matrix.folder }}
      name: Run Cypress tests on ${{ matrix.folder }}
      env:
        TERM: xterm
    - name: Upload Cypress recording upon failure
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-recording-${{ matrix.folder }}
        path: ./cypress
        if-no-files-found: ignore
